# Add PC1 and PC2 to Iris dataframe and plot
iris <- mutate(iris, PC1 = pca$x[,1], PC2 = pca$x[,2])
View(iris)
# Variation in Iris data
pca <- prcomp(iris[,1:4])
show(iris)
plot(pca$sdev, type = "b", main = "PC Variances", xlab = "PC", ylab = "Variance")
# Add PC1 and PC2 to Iris dataframe and plot
iris <- mutate(iris, PC1 = pca$x[,1], PC2 = pca$x[,2])
View(iris)
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = iris$Species))
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = iris$Species)) +
scale_fill_discrete(name = "Species", labels = c("A", "B", "C"))
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = iris$Species)) +
scale_fill_discrete(name = "Species")
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = species))
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = Species))
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = Species)) +
ggtitle("PCA of Iris Dataset by Species")
ggplot(iris, aes(x = PC1, y = PC2)) +
geom_point(aes(col = Species)) +
ggtitle("PCA of Iris Dataset by Species")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(pca$sdev)
# Variation in Iris data
pca <- prcomp(iris[,1:4])
plot(pca$sdev, type = "b", main = "PC Variances", xlab = "PC", ylab = "Variance")
install.packages("Rtsne")
library(Rtsne)
?Rtsne
iris_unique <- unique(iris)
View(iris_unique)
tSNE <- Rtsne(iris_unique[,1:4])
View(tSNE)
# Add Y_init to iris_unique dataset and plot
iris_unique <- mutate(iris_unique, Location = tSNE$Y)
tSNE[["Y"]]
# Add Y_init to iris_unique dataset and plot
iris_unique <- mutate(iris_unique, Location1 = tSNE$Y[,1], Location2 = tSNE$Y[,2])
ggplot(iris_unique, aes(x = Location1, y = Location2)) +
geom_point(aes(col = Species)) +
ggtitle("tSNE of Iris Dataset by Species")+
theme(plot.title = element_text(hjust = 0.5))
# Add Y_init to iris_unique dataset and plot
iris_unique <- mutate(iris_unique, tSNE1 = tSNE$Y[,1], tSNE2 = tSNE$Y[,2])
ggplot(iris_unique, aes(x = Location1, y = Location2)) +
geom_point(aes(col = Species)) +
ggtitle("tSNE of Iris Dataset by Species")+
theme(plot.title = element_text(hjust = 0.5))
iris_unique <- unique(iris)
tSNE <- Rtsne(iris_unique[,1:4])
ggplot(iris_unique, aes(x = tSNE1, y = tSNE2)) +
geom_point(aes(col = Species)) +
ggtitle("tSNE of Iris Dataset by Species")+
theme(plot.title = element_text(hjust = 0.5))
# Add Y_init to iris_unique dataset and plot
iris_unique <- mutate(iris_unique, tSNE1 = tSNE$Y[,1], tSNE2 = tSNE$Y[,2])
ggplot(iris_unique, aes(x = tSNE1, y = tSNE2)) +
geom_point(aes(col = Species)) +
ggtitle("tSNE of Iris Dataset by Species")+
theme(plot.title = element_text(hjust = 0.5))
pca_var <- cbind(1:4, pca$sdev)
# Variation in iris data
pca <- prcomp(iris[,1:4])
pca_var <- cbind(1:4, pca$sdev)
View(pca_var)
View(pca_var)
ggplot(pca_var, aes(x = pca_var[1], y = pca_var[2])) +
geom_point(aes(col = "red")) +
geom_line()
pca_var <- cbind(1:4, pca$sdev)
ggplot(pca_var, aes(x = pca_var[1], y = pca_var[2])) +
geom_point(aes(col = "red")) +
geom_line()
View(pca_var)
# Variation in iris data
pca <- prcomp(iris[,1:4])
plot(pca$sdev, type = "b", main = "PC Variances", xlab = "PC", ylab = "Variance")
x <- 4
x
x <- 44
x
lintr:::addin_lint()
styler:::style_active_file()
?help
library(Titanic)
library("Titanic")
View(Titanic)
Titanic
load(Titanic)
library('Titanic')
View('Titanic')
View(Titanic)
?aggregate
loud_intro <- str_to_upper("my_intro")
library(stringr)
loud_intro <- str_to_upper("my_intro")
loud_intro
s <- num^3
num = 2
num
s <- num^3
s
test <- c("INFO 201", "CSE 142", "mps-803c")
RemoveDigits <- function(vector_of_strings){
s <-  gsub("\\d", "" , vector_of_strings)s
}
RemoveDigits <- function(vector_of_strings){
s <-  gsub("\\d", "" , vector_of_strings)
}
RemoveDigits(test)
s
today <- as.Date(Sys.Date())
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- yday(winter_break) - yday(today)
RemoveDigits <- function(vector_of_strings) {
for (a in 0:9) {
vector_of_strings <- str_remove_all(vector_of_strings, as.character(a))
}
vector_of_strings
}
RemoveDigits(test)
bday_intro <- function(name, age, nextx) {
days <- today - nextx
(paste(make_introduction(name, age), ". In", days, " days I'll be", age + 1))
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
my_bday_intro <- bday_intro(my_name, my_age, as.Date("2018-5-24"))
name <- "Kiran"
age <- 19
bday_intro <- function(name, age, nextx) {
days <- today - nextx
(paste(make_introduction(name, age), ". In", days, " days I'll be", age + 1))
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
my_bday_intro <- bday_intro(my_name, my_age, as.Date("2018-5-24"))
bday_intro <- function(name, age, nextx) {
+     days <- today - nextx
+     (paste("In", days, " days I'll be", age + 1))
+ }
>
RemoveDigits <- function(x) {
gsub("[0-9]", "", x)
}
RemoveDigits(test)
bday_intro <- function(name, age, nextx) {
days <- today - nextx
paste("In", days, " days I'll be", age + 1)
}
bday_intro("Kiran",20,as.Date("2018-5-24"))
bday_intro("Kiran",20,as.Date("2018-10-22"))
days <- today - nextx
today <- Sys.Date()
today
winter_break <- as.Date("Dec 15 2018",  "%b %d %Y")
winter_break
days_to_break <- print(winter_break - today)
remove_digits <- function(element) {
return(str_remove_all(element, "[0-9]"))
}
remove_digits(test)
if (any(str_detect(test, "[0-9]"))) {
print("Oh no!")
} else {
print("Yay!")
}
if (any(str_detect(remove_digits(test), "[0-9]"))) {
print("Oh no!")
} else {
print("Yay!")
}
make_introduction <- function(name, age) paste("Hello, my name is", name, "and I'm", age, "years old", sep=" ")
make_introduction("Kiran", 20)
RemoveDigits <- function(str){
gsub("\\d+", "", str)
}
RemoveDigits(test)
x <- grep("\\d+", digits_removed)
if(length(x) == 0){
print("Yay!")
} else print("Oh no!")
x <- grep("\\d+", RemoveDigits(test))
x <- grep("\\d+", digits_removed)
if(length(x) == 0){
print("Yay!")
} else print("Oh no!")
numbers <- 700:999
lower_numbers <- numbers[1:200]
lower.tri()
lower_numbers
if (all(!grepl("\\d", test))) {
print("Yay!")
} else {
print("Oh no!")
}
no_dig <- RemoveDigits(test)
if (all(!grepl("\\d", no_dig))) {
print("Yay!")
} else {
print("Oh no!")
}
today <- as.Date(Sys.Date())
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-03-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- as.numeric(spring_break - today)
days_to_break
if(is.element("[0-9]+", vector)) {
cat("Oh no!")
}
cat("Yay!")
if(is.element("[0-9]+", test)) {
cat("Oh no!")
}
cat("Yay!")
RemoveDigits <- function(vector) {
vector <- str_remove(vector, '\\(?[0-9,.]+')
return(vector)
}
RemoveDigits(test)
contains_digits <- grepl("[0-9]", test)
contains_digits
no_digits <- RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
cat(no_digits, "\n")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
contains_digits <- grepl("[0-9]", no_digits)
if (all(contains_digits)) {
print("Oh no!")
} else {
print("Yay!")
}
class_men_dead <-titanic[titanic$Class==ticket_class & titanic$Sex=="Male"& titanic$Age=="Adult"& titanic$Survived=="No",5]
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
class_men_dead <-titanic[titanic$Class==ticket_class & titanic$Sex=="Male"& titanic$Age=="Adult"& titanic$Survived=="No",5]
male <- titanic[titanic$Class == "Crew" & titanic$Sex == "Male" &
titanic$Age == "Adult", ]
View(male)
male <- titanic[titanic$Class == "Crew" & titanic$Sex == "Male" &
titanic$Age == "Adult", 5]
male <- titanic[titanic$Class == "3rd" & titanic$Sex == "Male" &
titanic$Age == "Adult", 5]
male <- titanic[titanic$Class == "3rd" & titanic$Sex == "Male" &
titanic$Age == "Adult", ]
View(male)
male <- titanic[titanic$Class == "Crew" & titanic$Sex == "Male" &
titanic$Age == "Adult", ]
survival_rate <- function(ticket) {
male <- titanic[titanic$Class == "Crew" & titanic$Sex == "Male" &
titanic$Age == "Adult", ]
female <- titanic[titanic$Class == ticket & titanic$Sex == "Female" &
titanic$Age == "Adult", ]
children <- titanic[titanic$Class == ticket & titanic$Age == "Child", ]
male_total <- sum(male$Freq)
female_total <- sum(female$Freq)
children_total <- sum(children$Freq)
male_survive <- sum(male$Freq[male$Survived == "Yes"])
female_survive <- sum(female$Freq[female$Survived == "Yes"])
children_survive <- sum(children$Freq[children$Survived == "Yes"])
women_children_rate <- round(((female_survive + children_survive) /
(female_total + children_total)) * 100, 0)
male_rate <- round((male_survive / male_total) * 100, 0)
sentence <- paste0(
"Of ", ticket, " class, ", women_children_rate,
"% of women and children survived and ", male_rate,
"% of men survived."
)
sentence
}
ticket <- "Crew"
survival_rate(ticket)
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# a3-using-data
# Before you get started, set your working directory using the Session menu
# Session -> Set Working Directory -> To Source File Location
###################### DataFrame Manipulation (20 POINTS) ######################
# Create a vector `first_names` with 5 names in it
first_names <- c("Kiran", "Heidi", "Ben", "Bill", "Matt")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100)
# in a math course (that correspond to the 5 names above)
math_grades <- c(95, 90, 85, 80, 75)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100)
# in a Spanish course (that correspond to the 5 names above
spanish_grades <- c(98, 96, 94, 97, 99)
# Create a data.frame variable `students` by combining
# the vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades,
stringsAsFactors = FALSE
)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `students` minus one (b/c of their names)
num_courses <- ncol(students) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
students$grade_diff <- students$math_grades - students$spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
students$better_at_math <- students$grade_diff > 0
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(students$better_at_math == TRUE)
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file = "data/grades.csv", row.names = FALSE)
########################### Loading R Data (30 points) #########################
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment. You should be able to `View()` it
# Pay *close attention* to what each column means. Use ?Titanic to read more.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
children <- titanic[titanic$Age == "Child", ]
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
num_children <- nrow(children)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
most_lost <- titanic$Freq[titanic$Freq == max(titanic$Freq)]
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(ticket) {
male <- titanic[titanic$Class == ticket & titanic$Sex == "Male" &
titanic$Age == "Adult", ]
female <- titanic[titanic$Class == ticket & titanic$Sex == "Female" &
titanic$Age == "Adult", ]
children <- titanic[titanic$Class == ticket & titanic$Age == "Child", ]
male_total <- sum(male$Freq)
female_total <- sum(female$Freq)
children_total <- sum(children$Freq)
male_survive <- sum(male$Freq[male$Survived == "Yes"])
female_survive <- sum(female$Freq[female$Survived == "Yes"])
children_survive <- sum(children$Freq[children$Survived == "Yes"])
women_children_rate <- round(((female_survive + children_survive) /
(female_total + children_total)) * 100, 0)
male_rate <- round((male_survive / male_total) * 100, 0)
sentence <- paste0(
"Of ", ticket, " class, ", women_children_rate,
"% of women and children survived and ", male_rate,
"% of men survived."
)
sentence
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
survival_rate("Crew")
########################### Reading in Data (40 points)#########################
# In this section, we'll read in a .csv file with a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy
# for each country in 1960 and 2013. We'll ask real-world questions about the
# data by writing the code that answers our question.
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv("./data/life_expectancy.csv",
stringsAsFactors = FALSE
)
# Determine if `life_expectancy` is a data.frame by using
# the is.data.frame function. You may also want to View() it.
is.data.frame(life_expectancy)
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
most_improved <- life_expectancy$country[life_expectancy$change ==
max(life_expectancy$change)]
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- nrow(life_expectancy[life_expectancy$change < 5, ])
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
country_change <- function(name) {
life_expectancy[life_expectancy$country == name, ]$change
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
country_change("Sweden")
# Define a function `lowest_life_exp_in_region()` that takes in a **region**
# as an argument, and returns the **name of the country**
# with the lowest life expectancy in 2013 (in that region)
lowest_life_exp_in_region <- function(region) {
region_frame <- life_expectancy[life_expectancy$region == region, ]
region_frame$country[region_frame$le_2013 == min(region_frame$le_2013)]
}
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- lowest_life_exp_in_region("South Asia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(country1, country2) {
country1_change <- round(country_change(country1), 1)
country2_change <- round(country_change(country2), 1)
diff <- abs(country1_change - country2_change)
larger_country <- ""
smaller_country <- ""
larger_country_change <- 0
smaller_country_change <- 0
if (country1_change > country2_change) {
larger_country <- country1
smaller_country <- country2
larger_country_change <- country1_change
smaller_country_change <- country2_change
} else {
larger_country <- country2
smaller_country <- country1
larger_country_change <- country2_change
smaller_country_change <- country1_change
}
sentence <- paste0(
"The country with the bigger change in life expectancy was ",
larger_country, " (gain=", larger_country_change,
"), whose life expectancy grew by ", diff,
" years more than ", smaller_country,
"'s (gain= ", smaller_country_change, ")."
)
sentence
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
write.csv(life_expectancy,
file = "data/life_expectancy_with_change.csv",
row.names = FALSE
)
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
library("dplyr")
averages <- group_by(life_expectancy, region) %>%
summarize(mean = mean(change))
highest_avg_change <- averages$region[averages$mean == max(averages$mean)]
region <- aggregate(life_expectancy$change, by = list(life_expectancy$region), FUN = mean)
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button)
# your graph as a .png file in your repo
# Then, in a comment below, *provide an interpretation* of the relationship
# you observe. Feel free to use any library of your choice, or base R functions.
plot(life_expectancy$le_1960, life_expectancy$change,
main = "Change in Life Expectancy after 1960 in Various Countries",
xlab = "Life Expectancy in 1960", ylab = "Change in Life Expectancy"
)
dev.copy(png, "expectancy_change_graph.png")
dev.off()
# Put your interpretation here!
# There is an overall downward trend from the scatter plot. The greater the
# life expectancy in 1960, the lower the change from 1960 to 2013. Similarly,
# countries with smaller life expectancies in 1960 experienced greater overall
# changes from 1960 to 2013. This is likely because there is more "room for
# improvement." After all, life expectancy overall plateaus at a certain point.
titles <- c('President', 'VP', 'Secretary of State', 'Secretary of Defense')
names <- c('Donald Trump', 'Mike Pence', 'Mike Pompeo', 'James N. Mattis')
us <- data.frame(titles,names)
View(us)
setwd("~/Desktop/collabdemo")
cd ..
